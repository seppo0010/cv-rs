var N=null,E="",T="t",U="u",searchIndex={};
var R=["x coordinate","y coordinate","height","width","x coordinate of the left-top corner","y coordinate of the left-top corner","width of this rectangle","height of this rectangle","32 bit float, single channel (grey image)","32 bit float, three channels (RGB image)","normalize_to_mat","Opaque data struct for C bindings","return_score","size2i","Type for matching keypoint descriptors","Builder that provides defaults for MSER","Speeded up robust features extractor.","Creates a new maximally stable extremal region extractor…","Replace current octave_layers with specified value","octave_layers","Replace current delta with specified value","Creates new instance","If set, always convert image to the single channel…","If set, always convert image to the 3 channel BGR color…","Enable JPEG features, 0 or 1, default is False.","Number of columns","Number of rows","Create an empty `Mat` with specific size (rows, cols and…","Returns individual pixel (element) information within the…","SvmDetector","Hog parameters.","from_path","result","detect_multiscale","svmdetector","with_params","hogparams","set_svm_detector","Sets the SVM detector.","termcriteria","cv::video","`VideoWriter` constructor. -path – Name of the output…","videowriterproperty","cv::core","to_owned","clone_into","try_from","borrow_mut","try_into","type_id","borrow","typeid","cv::cuda","cv::errors","cv::features2d","cv::hash","Computes image hash","Compares two image hashes","compute","compare","cv::highgui","cv::imgcodecs","cv::imgproc","cv::mat","cv::objdetect","cv::videoio","detect_and_compute","detect","flipcode","normtype","termtype","windowflag","capprop","default","rotatedrect","hogdescriptor","videowriter","keypoint","scalar","linetype","kmeanscenters","descriptormatchertype","mserbuilder","siftbuilder","surfbuilder","mouseeventtype","imagereadmode","imagewritemode","imagewritepngstrategy","histogramcomparisionmethod","thresholdtype","colorconversion","interpolationflag","bordertype","formatter","option","backtrace","point2i","Resizes an image.","KeyPoint","FromBytes","RotatedRect","TermCriteria","GpuCascade","KMeansCenters","DescriptorMatcherType","BOWKMeansTrainer","DescriptorMatcher","MSERBuilder","SIFTBuilder","SURFBuilder","Feature2D","AverageHash","BlockMeanHash","ColorMomentHash","MarrHildrethHash","RadialVarianceHash","WindowFlag","MouseEventType","ImageReadMode","ImageWriteMode","ImageWritePngStrategy","HistogramComparisionMethod","ThresholdType","ColorConversion","InterpolationFlag","BorderType","HogParams","HogDescriptor","ObjectDetect","CascadeClassifier","VideoWriterProperty","VideoCapture","VideoWriter","CGpuCascade","CSvmDetector"];
searchIndex["cv"]={"doc":"This library primarily provides a binding and API for…","i":[[0,"core","cv","Core data structures in OpenCV",N,N],[3,R[99],R[43],"Data structure for salient point detectors",N,N],[12,"point",E,"Coordinates of the keypoint",0,N],[12,"size",E,"Diameter of the meaningful keypoint neighborhood",0,N],[12,"angle",E,"Computed orientation of the keypoint (-1 if not…",0,N],[12,"response",E,"The response by which the most strong keypoints have been…",0,N],[12,"octave",E,"Octave (pyramid layer) from which the keypoint has been…",0,N],[12,"class_id",E,"Object class (if the keypoints need to be clustered by an…",0,N],[3,"Scalar",E,"A 4-element struct that is widely used to pass pixel values.",N,N],[3,"Point2i",E,"2D integer points specified by its coordinates `x` and `y`.",N,N],[12,"x",E,R[0],1,N],[12,"y",E,R[1],1,N],[3,"Point2f",E,"2D floating points specified by its coordinates `x` and `y`.",N,N],[12,"x",E,R[0],2,N],[12,"y",E,R[1],2,N],[3,"Size2i",E,"`Size2i` struct is used for specifying the size of an…",N,N],[12,R[3],E,R[3],3,N],[12,R[2],E,R[2],3,N],[3,"Size2f",E,"`Size2f` struct is used for specifying the size of an…",N,N],[12,R[3],E,R[3],4,N],[12,R[2],E,R[2],4,N],[3,"Rect",E,"The `Rect` defines a rectangle in integer.",N,N],[12,"x",E,R[4],5,N],[12,"y",E,R[5],5,N],[12,R[3],E,R[6],5,N],[12,R[2],E,R[7],5,N],[3,"Rect2f",E,"The `Rect2f` are rectangles in float.",N,N],[12,"x",E,R[4],6,N],[12,"y",E,R[5],6,N],[12,R[3],E,R[6],6,N],[12,R[2],E,R[7],6,N],[3,R[101],E,"This struct represents a rotated (i.e. not up-right)…",N,N],[3,R[102],E,"Termination criteria for iterative algorithms.",N,N],[4,"LineType",E,"Line type",N,N],[13,"Filled",E,"Default type",7,N],[13,"Line4",E,"4-connected line",7,N],[13,"Line8",E,"8-connected line",7,N],[13,"LineAA",E,"antialiased line",7,N],[4,"FlipCode",E,"A flag to specify how to flip the image. see Mat::flip",N,N],[13,"XAxis",E,"Along x-axis: dst[i, j] = src[src.rows - i - 1, j]",8,N],[13,"YAxis",E,"Along y-axis: dst[i, j] = src[i, src.cols - j - 1]",8,N],[13,"XYAxis",E,"Along both axis: dst[i, j] = src[src.rows - i - 1,…",8,N],[4,"CvType",E,"Here is the `CvType` in an easy-to-read table.",N,N],[13,"Cv8UC1",E,"8 bit unsigned, single channel (grey image)",9,N],[13,"Cv8SC1",E,"8 bit signed, single channel (grey image)",9,N],[13,"Cv16UC1",E,"16 bit unsigned, single channel (grey image)",9,N],[13,"Cv16SC1",E,"16 bit signed, single channel (grey image)",9,N],[13,"Cv32SC1",E,"32 bit signed, single channel (grey image)",9,N],[13,"Cv32FC1",E,R[8],9,N],[13,"Cv64FC1",E,R[8],9,N],[13,"Cv8UC2",E,"8 bit, two channel (rarelly seen)",9,N],[13,"Cv8UC3",E,"8 bit unsigned, three channels (RGB image)",9,N],[13,"Cv8SC3",E,"8 bit signed, three channels (RGB image)",9,N],[13,"Cv16UC3",E,"16 bit unsigned, three channels (RGB image)",9,N],[13,"Cv16SC3",E,"16 bit signed, three channels (RGB image)",9,N],[13,"Cv32SC3",E,"32 bit signed, three channels (RGB image)",9,N],[13,"Cv32FC3",E,R[9],9,N],[13,"Cv64FC3",E,R[9],9,N],[4,"NormType",E,"Normalization type. Please refer to OpenCV's documentation.",N,N],[13,"Inf",E,"Normalized using `max`",10,N],[13,"L1",E,"Normalized using L1 distance",10,N],[13,"L2",E,"Normalized using L2 distance",10,N],[13,"L2Sqr",E,"Normalized using L2 sqr distance",10,N],[13,"Hamming",E,"Normalized using hamming distance",10,N],[13,"Hamming2",E,"Normalized using hamming2 distance",10,N],[13,"Relative",E,"Normalized using relative distance",10,N],[13,"MinMax",E,"Normalized using minmax distance",10,N],[4,"TermType",E,"Term criteria type, can be one of: Count, Eps or Count + Eps",N,N],[13,"Count",E,"The maximum number of iterations or elements to compute",11,N],[13,"EPS",E,"the desired accuracy or change in parameters at which the…",11,N],[8,R[100],E,"Allow self deserialization from byte slice",N,N],[10,"from_bytes",E,"Deserializes self from byte slice",12,N],[11,"new",E,"Creates a new scalar object.",13,[[["c_int"],["c_int"],["c_int"],["c_int"]],["self"]]],[11,"all",E,"Creates a new scalar object with all value being the same.",13,[[["c_int"]],["self"]]],[11,"new",E,"Creats a new `Point2i`.",1,[[["c_int"],["c_int"]],["self"]]],[11,"new",E,"Creats a new `Point2f`.",2,[[["f32"],["f32"]],["self"]]],[11,"new",E,"Creates a new `Size2i` object with `width` and `height`",3,[[["c_int"],["c_int"]],["self"]]],[11,"new",E,"Creates a new `Rect` with (x, y, width, height) parameters.",5,[[["c_int"],["c_int"],["c_int"],["c_int"]],["self"]]],[11,"scale",E,"Scales the rectangle by the specified ratio.",5,[[["self"],["f32"]],["rect"]]],[11,R[10],E,"Normalize the rectangle according to the image (if the…",5,[[["self"],["mat"]],["rect2f"]]],[11,R[10],E,"Normalize the rectangle according to the image. This will…",6,[[["self"],["mat"]],["rect"]]],[11,"points",E,"Return 4 vertices of the rectangle.",14,N],[11,"bounding_rect",E,"Return the minimal up-right rectangle containing the…",14,[[["self"]],["rect"]]],[11,"new",E,"Creates a new termination criteria.",15,[[[R[70]],["c_int"],["f64"]],["self"]]],[0,"cuda","cv","Bindings to OpenCV's classes and functions that exploits…",N,N],[3,"GpuMat",R[52],"`GpuMat` data structure in rust, bound to an opaque type…",N,N],[12,"cols",E,R[25],16,N],[12,"rows",E,R[26],16,N],[12,"depth",E,"Depth of this mat",16,N],[3,"GpuHog",E,"Data structure that performs Histogram of Gradient (HOG).",N,N],[12,"params",E,R[30],17,N],[12,R[12],E,"Should return detection scores",17,N],[3,R[103],E,"Data structure that performs object detection with a…",N,N],[4,"CGpuMat",E,"Opaque data struct for C/C++ cv::cuda::GpuMat bindings",N,N],[4,"CGpuHog",E,R[11],N,N],[4,R[134],E,R[11],N,N],[11,R[73],E,"Creates a default `GpuMat`.",16,[[],["gpumat"]]],[11,"upload",E,"Uploads a normal `Mat`",16,[[["self"],["mat"]]]],[11,"new",E,"Creates a new GpuHog detector.",17,[[[R[13]],[R[13]],[R[13]],[R[13]],["c_int"]],["gpuhog"]]],[11,R[12],E,"Should or not return the detection score",17,[[["self"],["bool"]]]],[11,R[35],E,"Creates a new GpuHog detector with parameters specified…",17,[[[R[36]]],["gpuhog"]]],[11,R[37],E,R[38],17,[[["self"],[R[34]]]]],[11,R[31],E,"Loads the classifier from a file.",18,[[["p"]],[R[32],["error"]]]],[11,R[33],E,"Detects objects of different sizes in the input image.",18,[[["self"],["gpumat"]],["vec",["rect"]]]],[11,"set_find_largest_object",E,"Sets whether or not to find the only largest object.",18,[[["self"],["bool"]]]],[11,"set_max_num_objects",E,"Sets the maximum number of objects.",18,[[["self"],["c_int"]]]],[11,"set_min_neighbors",E,"Sets minimal neighbors required for a detection to be valid.",18,[[["self"],["c_int"]]]],[11,"set_max_object_size",E,"Sets the maximun object size.",18,[[["self"],[R[13]]]]],[11,"set_min_object_size",E,"Sets the minimal object size.",18,[[["self"],[R[13]]]]],[11,"set_scale_factor",E,"Sets the scale factor used in multiscale detection.",18,[[["self"],["f64"]]]],[11,"get_classifier_size",E,"Returns the classifier size.",18,[[["self"]],[R[13]]]],[11,"get_find_largest_object_flag",E,"Returns if the CascadeClassifier will only return the…",18,[[["self"]],["bool"]]],[11,"get_max_num_objects",E,"Returns the allowed maximal number of detected objects.",18,[[["self"]],["c_int"]]],[11,"get_min_neighbors",E,"Returns the number of minimal neighbors required for a…",18,[[["self"]],["c_int"]]],[11,"get_max_object_size",E,"Returns the maximum object size.",18,[[["self"]],[R[13]]]],[11,"get_min_object_size",E,"Returns the minimal object size.",18,[[["self"]],[R[13]]]],[11,"get_scale_factor",E,"Returns the scale factor.",18,[[["self"]],["f64"]]],[0,"errors","cv","Errors for OpenCV bindings",N,N],[4,"CvError",R[53],"Custom errors that may happen during calls",N,N],[13,"InvalidPath",E,"Indicates that path was invalid",19,N],[13,"EntryNotFound",E,"Indicates that there is no entry on specified path",19,N],[13,"UnknownError",E,"Indicates that error occurred in C++ code",19,N],[13,"UnicodeChars",E,"Indicates that string contains non ascii characters",19,N],[0,"features2d","cv","Provide 2D image feature detectors and descriptor extractors",N,N],[3,R[106],R[54],"K-means - based class to train visual vocabulary using the…",N,N],[3,"DMatch",E,R[14],N,N],[3,R[107],E,R[14],N,N],[3,"MSER",E,"Maximally stable extremal region extractor.",N,N],[3,R[108],E,R[15],N,N],[3,"SIFT",E,R[16],N,N],[3,R[109],E,R[15],N,N],[3,"SURF",E,R[16],N,N],[3,R[110],E,R[15],N,N],[4,R[104],E,"k-Means centers",N,N],[13,"Random",E,"Select random initial centers in each attempt.",20,N],[13,"Pp",E,"Use kmeans++ center initialization by Arthur and…",20,N],[4,R[105],E,"Descriptor matcher type",N,N],[13,"BruteForce",E,E,21,N],[13,"BruteForceL1",E,E,21,N],[13,"BruteForceHamming",E,E,21,N],[13,"BruteForceHamming2",E,E,21,N],[13,"FlannBased",E,E,21,N],[11,"new",E,R[17],22,[[["i32"],[R[39]],["i32"],[R[80]]],["self"]]],[11,"add",E,"Adds descriptors to a training set",22,[[["self"],["mat"]]]],[11,"cluster",E,"Clusters train descriptors",22,[[["self"]],["mat"]]],[11,"new",E,"Creates a descriptor matcher of a given type with the…",23,[[[R[81]]],["descriptormatcher"]]],[11,"add",E,"Adds descriptors to train a CPU or GPU descriptor collection",23,[[["self"],["vec"]]]],[11,"train",E,"Trains a descriptor matcher",23,[[["self"]]]],[11,"is_empty",E,"Returns true if there are no train descriptors",23,[[["self"]],["bool"]]],[11,"match_",E,"Finds the best match for each descriptor from a query set",23,[[["self"],["mat"]],["vec",["dmatch"]]]],[11,"match_two",E,"Finds the best match for each descriptor from a query set.…",23,[[["self"],["mat"],["mat"]],["vec",["dmatch"]]]],[11,"knn_match",E,"Finds the k best matches for each descriptor from a query…",23,[[["self"],["mat"],["usize"]],["vec",["vec"]]]],[11,"new",E,R[17],24,[[["c_int"],["c_int"],["c_int"],["f64"],["f64"],["c_int"],["f64"],["f64"],["c_int"]],["self"]]],[11,"detect_regions",E,"Detect MSER regions.",24,N],[11,"delta",E,R[20],25,[[["self"],["c_int"]],["self"]]],[11,"min_area",E,"Replace current min_area with specified value",25,[[["self"],["c_int"]],["self"]]],[11,"max_area",E,"Replace current max_area with specified value",25,[[["self"],["c_int"]],["self"]]],[11,"max_variation",E,"Replace current max_variation with specified value",25,[[["self"],["f64"]],["self"]]],[11,"min_diversity",E,"Replace current min_diversity with specified value",25,[[["self"],["f64"]],["self"]]],[11,"max_evolution",E,"Replace current max_evolution with specified value",25,[[["self"],["c_int"]],["self"]]],[11,"area_threshold",E,"Replace current area_threshold with specified value",25,[[["self"],["f64"]],["self"]]],[11,"min_margin",E,"Replace current min_margin with specified value",25,[[["self"],["f64"]],["self"]]],[11,"edge_blur_size",E,"Replace current edge_blur_size with specified value",25,[[["self"],["c_int"]],["self"]]],[11,"new",E,R[17],26,[[["c_int"],["c_int"],["f64"],["f64"],["f64"]],["self"]]],[11,"features",E,"Replace current features with specified value",27,[[["self"],["c_int"]],["self"]]],[11,R[19],E,R[18],27,[[["self"],["c_int"]],["self"]]],[11,"contrast_threshold",E,"Replace current contrast_threshold with specified value",27,[[["self"],["f64"]],["self"]]],[11,"edge_threshold",E,"Replace current edge_threshold with specified value",27,[[["self"],["f64"]],["self"]]],[11,"sigma",E,"Replace current sigma with specified value",27,[[["self"],["f64"]],["self"]]],[11,"new",E,R[17],28,[[["f64"],["c_int"],["c_int"],["bool"],["bool"]],["self"]]],[11,"hessian_threshold",E,R[18],29,[[["self"],["f64"]],["self"]]],[11,"octaves",E,R[18],29,[[["self"],["c_int"]],["self"]]],[11,R[19],E,R[18],29,[[["self"],["c_int"]],["self"]]],[11,"extended",E,"Replace current extended with specified value",29,[[["self"],["bool"]],["self"]]],[11,"upright",E,R[20],29,[[["self"],["bool"]],["self"]]],[8,R[111],E,"Basic trait for 2D image feature detectors and descriptor…",N,N],[10,R[66],E,"Detects keypoints and computes the descriptors",30,N],[0,"hash","cv","The module brings implementations of different image…",N,N],[3,R[112],R[55],"Computes average hash value of the input image",N,N],[3,R[113],E,"Image hash based on block mean",N,N],[3,R[114],E,"Image hash based on color moments",N,N],[3,R[115],E,"Marr-Hildreth Operator Based Hash, slowest but more…",N,N],[3,"PHash",E,"Slower than AverageHash, but tolerant of minor modifications",N,N],[3,R[116],E,"Image hash based on Radon transform",N,N],[8,"HashImplInterface",E,E,N,N],[8,"Hash",E,"Basic trait for all hash types",N,N],[10,R[58],E,R[56],31,[[["self"],["mat"]],["mat"]]],[10,R[59],E,R[57],31,[[["self"],["mat"],["mat"]],["f64"]]],[11,"new",E,R[21],32,[[],["self"]]],[11,"new",E,R[21],33,[[],["self"]]],[11,"new",E,R[21],34,[[],["self"]]],[11,"new",E,R[21],35,[[],["self"]]],[11,"new",E,R[21],36,[[],["self"]]],[11,"new",E,R[21],37,[[],["self"]]],[0,"highgui","cv","highgui: high-level GUI",N,N],[4,R[117],R[60],"Flags for highgui_named_window. This only supports a…",N,N],[13,"Normal",E,"the window can be resized (no constraint) or switched to…",38,N],[13,"Autosize",E,"the window is constrained by the image displayed.",38,N],[13,"Opengl",E,"the window is with opengl support.",38,N],[13,"FreeRatio",E,"the window can be resized arbitrarily (no ratio constraint).",38,N],[4,R[118],E,"Mouse Events",N,N],[13,"MouseMove",E,"Indicates that the mouse has moved over the window.",39,N],[13,"LButtonDown",E,"Indicates that the left mouse button is pressed.",39,N],[13,"RButtonDown",E,"Indicates that the right mouse button is pressed.",39,N],[13,"MButtonDown",E,"Indicates that the middle mouse button is pressed.",39,N],[13,"LButtonUp",E,"Indicates that left mouse button is released.",39,N],[13,"RButtonUp",E,"Indicates that right mouse button is released.",39,N],[13,"MButtonUp",E,"Indicates that middle mouse button is released.",39,N],[13,"LButtonClick",E,"Indicates that left mouse button is double clicked.",39,N],[13,"RButtonClick",E,"Indicates that right mouse button is double clicked.",39,N],[13,"MButtonClick",E,"Indicates that middle mouse button is double clicked.",39,N],[13,"MouseWheel",E,"Positive/negative means forward/backward scrolling.",39,N],[13,"MouseHWheel",E,"Positive/negative means right and left scrolling.",39,N],[5,"highgui_named_window",E,"Create a window that can be used as a placeholder for…",N,[[["str"],[R[71]]],[R[32],["error"]]]],[5,"highgui_destroy_window",E,"Destroy the specified window with the given name.",N,[[["str"]]]],[5,"highgui_set_mouse_callback",E,"Set mouse handler for the specified window (identified by…",N,N],[6,"MouseCallbackData",E,"Pointer referring to the data used in MouseCallback",N,N],[6,"MouseCallback",E,"Callback function for mouse events, primarily used in…",N,N],[8,"Show",E,"Provides some highgui functionallity",N,N],[10,"show",E,"Calls out to highgui to show the image, the duration is…",40,[[["self"],["str"],["c_int"]],[R[32],["error"]]]],[0,"imgcodecs","cv","Image file reading and writing, see OpenCV imgcodecs.",N,N],[4,R[119],R[61],"ImreadModes. See documentation for detauls",N,N],[13,"Unchanged",E,"If set, return the loaded image as is (with alpha channel,…",41,N],[13,"Grayscale",E,R[22],41,N],[13,"Color",E,R[23],41,N],[13,"AnyDepth",E,"If set, return 16-bit/32-bit image when the input has the…",41,N],[13,"AnyColor",E,"If set, the image is read in any possible color format.",41,N],[13,"LoadGdal",E,"If set, use the gdal driver for loading the image.",41,N],[13,"ReducedGrayscale2",E,R[22],41,N],[13,"ReducedColor2",E,R[23],41,N],[13,"ReducedGrayscale4",E,R[22],41,N],[13,"ReducedColor4",E,R[23],41,N],[13,"ReducedGrayscale8",E,R[22],41,N],[13,"ReducedColor8",E,R[23],41,N],[4,R[120],E,"Imwrite flags. See documentation for detauls",N,N],[13,"JpegQuality",E,"For JPEG, it can be a quality from 0 to 100 (the higher is…",42,N],[13,"JpegProgressive",E,R[24],42,N],[13,"JpegOptimize",E,R[24],42,N],[13,"JpegRstInterval",E,"JPEG restart interval, 0 - 65535, default is 0 - no restart.",42,N],[13,"JpegLumaQuality",E,"Separate luma quality level, 0 - 100, default is 0 - don't…",42,N],[13,"JpegChromaQuality",E,"Separate chroma quality level, 0 - 100, default is 0 -…",42,N],[13,"PngCompression",E,"For PNG, it can be the compression level from 0 to 9. A…",42,N],[13,"PngStrategy",E,"One of cv::ImwritePNGFlags, default is…",42,N],[13,"PngBilevel",E,"Binary level PNG, 0 or 1, default is 0.",42,N],[13,"PxmBinary",E,"For PPM, PGM, or PBM, it can be a binary format flag, 0 or…",42,N],[13,"WebpQuality",E,"For WEBP, it can be a quality from 1 to 100 (the higher is…",42,N],[13,"PamTupletype",E,"For PAM, sets the TUPLETYPE field to the corresponding…",42,N],[4,R[121],E,"Imwrite PNG flag. See documentation for detauls",N,N],[13,"Default",E,"Use this value for normal data.",43,N],[13,"Filtered",E,"Use this value for data produced by a filter (or…",43,N],[13,"HuffmanOnly",E,"Use this value to force Huffman encoding only (no string…",43,N],[13,"RLE",E,"Use this value to limit match distances to one (run-length…",43,N],[13,"Fixed",E,"Using this value prevents the use of dynamic Huffman…",43,N],[0,"imgproc","cv","Image processing, see OpenCV imgproc.",N,N],[4,R[122],R[62],"Possible methods for histogram comparision method",N,N],[13,"Correlation",E,"HISTCMP_CORREL",44,N],[13,"ChiSquare",E,"HISTCMP_CHISQR",44,N],[13,"Intersection",E,"HISTCMP_INTERSECT",44,N],[13,"Bhattacharyya",E,"HISTCMP_BHATTACHARYYA and HISTCMP_HELLINGER",44,N],[13,"ChiSquareAlternative",E,"HISTCMP_CHISQR_ALT",44,N],[13,"KullbackLeiblerDivergence",E,"HISTCMP_KL_DIV",44,N],[4,R[123],E,"ThresholdTypes used in threshold.",N,N],[13,"Binary",E,E,45,N],[13,"BinaryInv",E,E,45,N],[13,"Trunc",E,E,45,N],[13,"ToZero",E,E,45,N],[13,"ToZeroInv",E,E,45,N],[13,"Mask",E,E,45,N],[13,"Otsu",E,E,45,N],[13,"Triangle",E,E,45,N],[4,R[124],E,"Color conversion code used in cvt_color.",N,N],[13,"BGR2BGRA",E,E,46,N],[13,"BGRA2BGR",E,E,46,N],[13,"BGR2RGBA",E,E,46,N],[13,"RGBA2BGR",E,E,46,N],[13,"BGR2RGB",E,E,46,N],[13,"BGRA2RGBA",E,E,46,N],[13,"BGR2GRAY",E,E,46,N],[13,"RGB2GRAY",E,E,46,N],[13,"GRAY2BGR",E,E,46,N],[13,"GRAY2BGRA",E,E,46,N],[13,"BGRA2GRAY",E,E,46,N],[13,"RGBA2GRAY",E,E,46,N],[13,"BGR2BGR565",E,E,46,N],[13,"RGB2BGR565",E,E,46,N],[13,"BGR5652BGR",E,E,46,N],[13,"BGR5652RGB",E,E,46,N],[13,"BGRA2BGR565",E,E,46,N],[13,"RGBA2BGR565",E,E,46,N],[13,"BGR5652BGRA",E,E,46,N],[13,"BGR5652RGBA",E,E,46,N],[13,"GRAY2BGR565",E,E,46,N],[13,"BGR5652GRAY",E,E,46,N],[13,"BGR2BGR555",E,E,46,N],[13,"RGB2BGR555",E,E,46,N],[13,"BGR5552BGR",E,E,46,N],[13,"BGR5552RGB",E,E,46,N],[13,"BGRA2BGR555",E,E,46,N],[13,"RGBA2BGR555",E,E,46,N],[13,"BGR5552BGRA",E,E,46,N],[13,"BGR5552RGBA",E,E,46,N],[13,"GRAY2BGR555",E,E,46,N],[13,"BGR5552GRAY",E,E,46,N],[13,"BGR2XYZ",E,E,46,N],[13,"RGB2XYZ",E,E,46,N],[13,"XYZ2BGR",E,E,46,N],[13,"XYZ2RGB",E,E,46,N],[13,"BGR2YCrCb",E,E,46,N],[13,"RGB2YCrCb",E,E,46,N],[13,"YCrCb2BGR",E,E,46,N],[13,"YCrCb2RGB",E,E,46,N],[13,"BGR2HSV",E,E,46,N],[13,"RGB2HSV",E,E,46,N],[13,"BGR2Lab",E,E,46,N],[13,"RGB2Lab",E,E,46,N],[13,"BGR2Luv",E,E,46,N],[13,"RGB2Luv",E,E,46,N],[13,"BGR2HLS",E,E,46,N],[13,"RGB2HLS",E,E,46,N],[13,"HSV2BGR",E,E,46,N],[13,"HSV2RGB",E,E,46,N],[13,"Lab2BGR",E,E,46,N],[13,"Lab2RGB",E,E,46,N],[13,"Luv2BGR",E,E,46,N],[13,"Luv2RGB",E,E,46,N],[13,"HLS2BGR",E,E,46,N],[13,"HLS2RGB",E,E,46,N],[13,"BGR2HSV_FULL",E,E,46,N],[13,"RGB2HSV_FULL",E,E,46,N],[13,"BGR2HLS_FULL",E,E,46,N],[13,"RGB2HLS_FULL",E,E,46,N],[13,"HSV2BGR_FULL",E,E,46,N],[13,"HSV2RGB_FULL",E,E,46,N],[13,"HLS2BGR_FULL",E,E,46,N],[13,"HLS2RGB_FULL",E,E,46,N],[13,"LBGR2Lab",E,E,46,N],[13,"LRGB2Lab",E,E,46,N],[13,"LBGR2Luv",E,E,46,N],[13,"LRGB2Luv",E,E,46,N],[13,"Lab2LBGR",E,E,46,N],[13,"Lab2LRGB",E,E,46,N],[13,"Luv2LBGR",E,E,46,N],[13,"Luv2LRGB",E,E,46,N],[13,"BGR2YUV",E,E,46,N],[13,"RGB2YUV",E,E,46,N],[13,"YUV2BGR",E,E,46,N],[13,"YUV2RGB",E,E,46,N],[13,"YUV2RGB_NV12",E,E,46,N],[13,"YUV2BGR_NV12",E,E,46,N],[13,"YUV2RGB_NV21",E,E,46,N],[13,"YUV2BGR_NV21",E,E,46,N],[13,"YUV2RGBA_NV12",E,E,46,N],[13,"YUV2BGRA_NV12",E,E,46,N],[13,"YUV2RGBA_NV21",E,E,46,N],[13,"YUV2BGRA_NV21",E,E,46,N],[13,"YUV2RGB_YV12",E,E,46,N],[13,"YUV2BGR_YV12",E,E,46,N],[13,"YUV2RGB_IYUV",E,E,46,N],[13,"YUV2BGR_IYUV",E,E,46,N],[13,"YUV2RGBA_YV12",E,E,46,N],[13,"YUV2BGRA_YV12",E,E,46,N],[13,"YUV2RGBA_IYUV",E,E,46,N],[13,"YUV2BGRA_IYUV",E,E,46,N],[13,"YUV2GRAY_420",E,E,46,N],[13,"YUV2RGB_UYVY",E,E,46,N],[13,"YUV2BGR_UYVY",E,E,46,N],[13,"YUV2RGBA_UYVY",E,E,46,N],[13,"YUV2BGRA_UYVY",E,E,46,N],[13,"YUV2RGB_YUY2",E,E,46,N],[13,"YUV2BGR_YUY2",E,E,46,N],[13,"YUV2RGB_YVYU",E,E,46,N],[13,"YUV2BGR_YVYU",E,E,46,N],[13,"YUV2RGBA_YUY2",E,E,46,N],[13,"YUV2BGRA_YUY2",E,E,46,N],[13,"YUV2RGBA_YVYU",E,E,46,N],[13,"YUV2BGRA_YVYU",E,E,46,N],[13,"YUV2GRAY_UYVY",E,E,46,N],[13,"YUV2GRAY_YUY2",E,E,46,N],[13,"RGBA2mRGBA",E,E,46,N],[13,"mRGBA2RGBA",E,E,46,N],[13,"RGB2YUV_I420",E,E,46,N],[13,"BGR2YUV_I420",E,E,46,N],[13,"RGBA2YUV_I420",E,E,46,N],[13,"BGRA2YUV_I420",E,E,46,N],[13,"RGB2YUV_YV12",E,E,46,N],[13,"BGR2YUV_YV12",E,E,46,N],[13,"RGBA2YUV_YV12",E,E,46,N],[13,"BGRA2YUV_YV12",E,E,46,N],[13,"BayerBG2BGR",E,E,46,N],[13,"BayerGB2BGR",E,E,46,N],[13,"BayerRG2BGR",E,E,46,N],[13,"BayerGR2BGR",E,E,46,N],[13,"BayerBG2GRAY",E,E,46,N],[13,"BayerGB2GRAY",E,E,46,N],[13,"BayerRG2GRAY",E,E,46,N],[13,"BayerGR2GRAY",E,E,46,N],[13,"BayerBG2BGR_VNG",E,E,46,N],[13,"BayerGB2BGR_VNG",E,E,46,N],[13,"BayerRG2BGR_VNG",E,E,46,N],[13,"BayerGR2BGR_VNG",E,E,46,N],[13,"BayerBG2BGR_EA",E,E,46,N],[13,"BayerGB2BGR_EA",E,E,46,N],[13,"BayerRG2BGR_EA",E,E,46,N],[13,"BayerGR2BGR_EA",E,E,46,N],[13,"COLORCVT_MAX",E,E,46,N],[4,R[125],E,"Interpolation algorithm",N,N],[13,"InterNearst",E,"nearest neighbor interpolation",47,N],[13,"InterLinear",E,"bilinear interpolation",47,N],[13,"InterCubic",E,"bicubic interpolation",47,N],[13,"InterArea",E,"resampling using pixel area relation. It may be a…",47,N],[13,"InterLanczos4",E,"Lanczos interpolation over 8x8 neighborhood",47,N],[13,"InterLinearExact",E,"Bit exact bilinear interpolation",47,N],[13,"InterMax",E,"mask for interpolation codes",47,N],[13,"WarpFillOutliers",E,"flag, fills all of the destination image pixels. If some…",47,N],[13,"WarpInverseMap",E,"flag, inverse transformation",47,N],[0,"mat","cv","Mat",N,N],[3,"Mat",R[63],"The class `Mat` represents an n-dimensional dense…",N,N],[12,"cols",E,R[25],48,N],[12,"rows",E,R[26],48,N],[12,"depth",E,"Depth of this mat (it should be the type).",48,N],[12,"channels",E,"Channels of this mat",48,N],[4,"CMat",E,"The class `CMat` is used as a pointer to represent the Mat…",N,N],[4,R[126],E,"Various border types, image boundaries are denoted with `|`.",N,N],[13,"Constant",E,"`iiiiii|abcdefgh|iiiiiii`  with some specified `i`",49,N],[13,"Replicate",E,"`aaaaaa|abcdefgh|hhhhhhh`",49,N],[13,"Reflect",E,"`fedcba|abcdefgh|hgfedcb`",49,N],[13,"Wrap",E,"`cdefgh|abcdefgh|abcdefg`",49,N],[13,"Reflect101",E,"`gfedcb|abcdefgh|gfedcba`",49,N],[13,"Transparent",E,"`uvwxyz|abcdefgh|ijklmno`",49,N],[13,"Isolated",E,"Do not look outside of ROI.",49,N],[11,"from_file_storage",E,"Loads `Mat` from file storage",48,[[["p"],["str"]],[R[32],["mat","error"]]]],[11,"new",E,"Creates an empty `Mat` struct.",48,[[],["mat"]]],[11,"from_buffer",E,"Creates a new `Mat` from buffer. Note that internally…",48,N],[11,"with_size",E,R[27],48,[[["c_int"],["c_int"],["c_int"]],["self"]]],[11,"zeros",E,R[27],48,[[["c_int"],["c_int"],["c_int"]],["self"]]],[11,"data",E,"Returns the raw data (as a `u8` pointer)",48,N],[11,"total",E,"Returns the total number of array elements. The method…",48,[[["self"]],["usize"]]],[11,"elem_size",E,"Returns the matrix element size in bytes.",48,[[["self"]],["usize"]]],[11,"elem_size1",E,"Returns the size of each matrix element channel in bytes.",48,[[["self"]],["usize"]]],[11,"step1",E,"Returns a normalized step.",48,[[["self"],["c_int"]],["usize"]]],[11,"size",E,"Returns the size of this matrix.",48,[[["self"]],[R[13]]]],[11,"is_valid",E,"Check if the `Mat` is valid or not.",48,[[["self"]],["bool"]]],[11,"roi",E,"Return a region of interest from a `Mat` specfied by a…",48,[[["self"],["rect"]],["mat"]]],[11,"flip",E,"Flips an image around vertical, horizontal, or both axes.",48,[[["self"],[R[68]]]]],[11,"cv_type",E,"Returns the images type. For supported types, please see…",48,[[["self"]],["cvtype"]]],[11,"eye",E,"Returns an identity matrix of the specified size and type.",48,[[["i32"],["i32"],["cvtype"]],["mat"]]],[11,"at",E,R[28],48,[[["self"],["i32"]],[T]]],[11,"at2",E,R[28],48,[[["self"],["i32"],["i32"]],[T]]],[11,"at3",E,R[28],48,[[["self"],["i32"],["i32"],["i32"]],[T]]],[11,"in_range",E,"Checks if Mat elements lie between the elements of two…",48,[[["self"],[R[78]],[R[78]]],["mat"]]],[11,"min_max_loc",E,"Finds the global minimum and maximum in an array.",48,N],[11,"mix_channels",E,"Copy specified channels from `self` to the specified…",48,[[["self"],["usize"],["usize"],[T]],["mat"]]],[11,"normalize",E,"Normalize the Mat according to the normalization type.",48,[[["self"],["f64"],["f64"],[R[69]]],["mat"]]],[11,"count_non_zero",E,"Counts non-zero array elements.",48,[[["self"]],["c_int"]]],[11,"copy_make_border",E,"Forms a border around an image.",48,[[["self"],["i32"],["i32"],["i32"],["i32"],[R[93]],[R[78]]],["mat"]]],[18,"Default",E,"same as Reflect101",49,N],[0,"objdetect","cv","Various object detection algorithms, such as Haar…",N,N],[3,R[130],R[64],"Cascade classifier class for object detection.",N,N],[3,R[29],E,R[29],N,N],[3,R[127],E,"Parameters that controls the behavior of HOG.",N,N],[12,"win_size",E,"Detection window size. Align to block size and block…",50,N],[12,"block_size",E,"Block size in pixels. Align to cell size. Only (16,16) is…",50,N],[12,"block_stride",E,"Block stride. It must be a multiple of cell size.",50,N],[12,"cell_size",E,"Cell size. Only (8, 8) is supported for now.",50,N],[12,"nbins",E,"Number of bins. Only 9 bins per cell are supported for now.",50,N],[12,"win_sigma",E,"Gaussian smoothing window parameter. Default -1 for CPU…",50,N],[12,"l2hys_threshold",E,"L2-Hys normalization method shrinkage. Default 0.2.",50,N],[12,"gamma_correction",E,"Flag to specify whether the gamma correction preprocessing…",50,N],[12,"nlevels",E,"Maximum number of detection window increases (HOG scales).…",50,N],[12,"hit_threshold",E,"Threshold for the distance between features and SVM…",50,N],[12,"win_stride",E,"Window stride. It must be a multiple of block stride.",50,N],[12,"padding",E,"Padding",50,N],[12,"scale",E,"Coefficient of the detection window increase.",50,N],[12,"group_threshold",E,"Coefficient to regulate the similarity threshold. When…",50,N],[12,"use_meanshift_grouping",E,"The useMeanShiftGrouping parameter is a boolean indicating…",50,N],[12,"final_threshold",E,"The `finalThreshold` parameter is mainly used to select…",50,N],[3,R[128],E,"`HogDescriptor` implements Histogram of Oriented Gradients.",N,N],[12,"params",E,R[30],51,N],[4,R[135],E,"Opaque type for C/C++ SvmDetector object",N,N],[8,R[129],E,"An object detect trait.",N,N],[10,R[67],E,"Detects the object inside this image and returns a list of…",52,[[["self"],["mat"]],["vec"]]],[11,"new",E,"Creates a cascade classifier, uninitialized. Before use,…",53,[[],["cascadeclassifier"]]],[11,R[31],E,"Creates a cascade classifier using the model specified.",53,[[["p"]],[R[32],["error"]]]],[11,"load",E,"Loads the classifier model from a path.",53,[[["self"],["p"]],[R[32],["error"]]]],[11,R[33],E,"The default detection uses scale factor 1.1, minNeighbors…",53,[[["self"],["mat"]],["vec",["rect"]]]],[11,"detect_with_params",E,"Detects the object using parameters specified.",53,[[["self"],["mat"],["f32"],["c_int"],[R[13]],[R[13]]],["vec",["rect"]]]],[11,"default_people_detector",E,"The built-in people detector.",54,[[],[R[34]]]],[11,"daimler_people_detector",E,"Returns the Daimler people detector.",54,[[],[R[34]]]],[11,R[35],E,"Creates a HogDescriptor with provided parameters.",51,[[[R[36]]],[R[75]]]],[11,R[37],E,R[38],51,[[["self"],[R[34]]]]],[0,"video","cv","Video Analysis, see OpenCV video",N,N],[0,"tracking",R[40],"Object Tracking, see OpenCV video track",N,N],[11,"camshift",R[63],"Finds an object center, size, and orientation; returns as…",48,[[["self"],["rect"],[R[39]]],[R[74]]]],[0,"analysis",R[40],"Motion Analysis, see OpenCV video motion",N,N],[0,"videoio","cv","Media I/O, see OpenCV videoio",N,N],[3,R[132],R[65],"Video capturing from video files, image sequences or…",N,N],[3,R[133],E,"`VideoWriter` provides easy access to write videos to…",N,N],[4,"CapProp",E,"Video capture's property identifier.",N,N],[13,"PosMsec",E,"Current position of the video file in milliseconds or…",55,N],[13,"PosFrames",E,"0-based index of the frame to be decoded/captured next.",55,N],[13,"PosAviRatio",E,"Relative position of the video file: 0 - start of the…",55,N],[13,"FrameWidth",E,"Width of the frames in the video stream.",55,N],[13,"FrameHeight",E,"Height of the frames in the video stream.",55,N],[13,"Fps",E,"Frame rate.",55,N],[13,"Fourcc",E,"4-character code of codec.",55,N],[13,"FrameCount",E,"Number of frames in the video file.",55,N],[13,"Format",E,"Format of the Mat objects returned by retrieve() .",55,N],[13,"Mode",E,"Backend-specific value indicating the current capture mode.",55,N],[13,"Brightness",E,"Brightness of the image (only for cameras).",55,N],[13,"Contrast",E,"Contrast of the image (only for cameras).",55,N],[13,"Saturation",E,"Saturation of the image (only for cameras).",55,N],[13,"Hue",E,"Hue of the image (only for cameras).",55,N],[13,"Gain",E,"Gain of the image (only for cameras).",55,N],[13,"Exposure",E,"Exposure (only for cameras).",55,N],[13,"ConvertRgb",E,"Boolean flags indicating whether images should be…",55,N],[13,"WhiteBalanceBlueU",E,"Currently not supported",55,N],[13,"Rectification",E,"Rectification flag for stereo cameras (note: only…",55,N],[13,"Monochrome",E,E,55,N],[13,"Sharpness",E,E,55,N],[13,"AutoExposure",E,E,55,N],[13,"Gamma",E,E,55,N],[13,"Temperature",E,E,55,N],[13,"Trigger",E,E,55,N],[13,"TriggerDelay",E,E,55,N],[13,"WhiteBalanceRedV",E,E,55,N],[13,"Zoom",E,E,55,N],[13,"Focus",E,E,55,N],[13,"Guid",E,E,55,N],[13,"IsoSpeed",E,E,55,N],[13,"Backlight",E,E,55,N],[13,"Pan",E,E,55,N],[13,"Tilt",E,E,55,N],[13,"Roll",E,E,55,N],[13,"Iris",E,E,55,N],[13,"Settings",E,E,55,N],[13,"Buffersize",E,E,55,N],[13,"Autofocus",E,E,55,N],[4,R[131],E,"`VideoWriter`'s property identifier.",N,N],[13,"Quality",E,"Current quality of the encoded videostream.",56,N],[13,"FrameBytes",E,"(Read-only) Size of just encoded video frame; note that…",56,N],[13,"NStripes",E,"Number of stripes for parallel encoding",56,N],[5,"codec_name_from_4cc",E,"Converts from four character code to `u32`",N,[[["str"]],[R[32],["u32","error"]]]],[5,"codec_name_to_4cc",E,"Converts to four character code from `u32`.",N,[[["u32"]],["string"]]],[11,"new",E,"Creates a capture device with specified camera id. If…",57,[[["c_int"]],["self"]]],[11,R[31],E,"Creates a capture device with the path of a video file…",57,[[["str"]],["self"]]],[11,"from_pipeline",E,"Create a capture device from a gstreamer pipeline (eg.…",57,[[["str"]],["self"]]],[11,"is_open",E,"Returns true if video capturing has been initialized…",57,[[["self"]],["bool"]]],[11,"read",E,"Grabs, decodes and returns the next video frame. `read`…",57,[[["self"]],[R[95],["mat"]]]],[11,"set",E,"Sets a property in the `VideoCapture`.",57,[[["self"],[R[72]],["f64"]],["bool"]]],[11,"get",E,"Gets a property in the `VideoCapture`.",57,[[["self"],[R[72]]],[R[95],["f64"]]]],[11,"new",E,R[41],58,[[["str"],["c_int"],["f64"],[R[13]],["bool"]],[R[76]]]],[11,"open",E,R[41],58,[[["self"],["str"],["c_int"],["f64"],[R[13]],["bool"]],["bool"]]],[11,"write",E,"Writes the specified image to video file. It must have the…",58,[[["self"],["mat"]]]],[11,"is_open",E,"Returns true if video writer has been initialized already.",58,[[["self"]],["bool"]]],[11,"set",E,"Sets a property in the `VideoWriter`. Note:…",58,[[["self"],[R[42]],["f64"]],["bool"]]],[11,"get",E,"Gets a property in the `VideoWriter`.",58,[[["self"],[R[42]]],[R[95],["f64"]]]],[11,"from",R[43],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[["self"]],[U]]],[11,R[44],E,E,0,[[["self"]],[T]]],[11,R[45],E,E,0,N],[11,R[46],E,E,0,[[[U]],[R[32]]]],[11,R[50],E,E,0,[[["self"]],[T]]],[11,R[49],E,E,0,[[["self"]],[R[51]]]],[11,R[47],E,E,0,[[["self"]],[T]]],[11,R[48],E,E,0,[[["self"]],[R[32]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[["self"]],[U]]],[11,R[44],E,E,13,[[["self"]],[T]]],[11,R[45],E,E,13,N],[11,R[46],E,E,13,[[[U]],[R[32]]]],[11,R[50],E,E,13,[[["self"]],[T]]],[11,R[49],E,E,13,[[["self"]],[R[51]]]],[11,R[47],E,E,13,[[["self"]],[T]]],[11,R[48],E,E,13,[[["self"]],[R[32]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[["self"]],[U]]],[11,R[44],E,E,1,[[["self"]],[T]]],[11,R[45],E,E,1,N],[11,R[46],E,E,1,[[[U]],[R[32]]]],[11,R[50],E,E,1,[[["self"]],[T]]],[11,R[49],E,E,1,[[["self"]],[R[51]]]],[11,R[47],E,E,1,[[["self"]],[T]]],[11,R[48],E,E,1,[[["self"]],[R[32]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[["self"]],[U]]],[11,R[44],E,E,2,[[["self"]],[T]]],[11,R[45],E,E,2,N],[11,R[46],E,E,2,[[[U]],[R[32]]]],[11,R[50],E,E,2,[[["self"]],[T]]],[11,R[49],E,E,2,[[["self"]],[R[51]]]],[11,R[47],E,E,2,[[["self"]],[T]]],[11,R[48],E,E,2,[[["self"]],[R[32]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[["self"]],[U]]],[11,R[44],E,E,3,[[["self"]],[T]]],[11,R[45],E,E,3,N],[11,R[46],E,E,3,[[[U]],[R[32]]]],[11,R[50],E,E,3,[[["self"]],[T]]],[11,R[49],E,E,3,[[["self"]],[R[51]]]],[11,R[47],E,E,3,[[["self"]],[T]]],[11,R[48],E,E,3,[[["self"]],[R[32]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[["self"]],[U]]],[11,R[44],E,E,4,[[["self"]],[T]]],[11,R[45],E,E,4,N],[11,R[46],E,E,4,[[[U]],[R[32]]]],[11,R[50],E,E,4,[[["self"]],[T]]],[11,R[49],E,E,4,[[["self"]],[R[51]]]],[11,R[47],E,E,4,[[["self"]],[T]]],[11,R[48],E,E,4,[[["self"]],[R[32]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[["self"]],[U]]],[11,R[44],E,E,5,[[["self"]],[T]]],[11,R[45],E,E,5,N],[11,R[46],E,E,5,[[[U]],[R[32]]]],[11,R[50],E,E,5,[[["self"]],[T]]],[11,R[49],E,E,5,[[["self"]],[R[51]]]],[11,R[47],E,E,5,[[["self"]],[T]]],[11,R[48],E,E,5,[[["self"]],[R[32]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[["self"]],[U]]],[11,R[44],E,E,6,[[["self"]],[T]]],[11,R[45],E,E,6,N],[11,R[46],E,E,6,[[[U]],[R[32]]]],[11,R[50],E,E,6,[[["self"]],[T]]],[11,R[49],E,E,6,[[["self"]],[R[51]]]],[11,R[47],E,E,6,[[["self"]],[T]]],[11,R[48],E,E,6,[[["self"]],[R[32]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[["self"]],[U]]],[11,R[44],E,E,14,[[["self"]],[T]]],[11,R[45],E,E,14,N],[11,R[46],E,E,14,[[[U]],[R[32]]]],[11,R[50],E,E,14,[[["self"]],[T]]],[11,R[49],E,E,14,[[["self"]],[R[51]]]],[11,R[47],E,E,14,[[["self"]],[T]]],[11,R[48],E,E,14,[[["self"]],[R[32]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[["self"]],[U]]],[11,R[46],E,E,15,[[[U]],[R[32]]]],[11,R[50],E,E,15,[[["self"]],[T]]],[11,R[49],E,E,15,[[["self"]],[R[51]]]],[11,R[47],E,E,15,[[["self"]],[T]]],[11,R[48],E,E,15,[[["self"]],[R[32]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[["self"]],[U]]],[11,R[44],E,E,7,[[["self"]],[T]]],[11,R[45],E,E,7,N],[11,R[46],E,E,7,[[[U]],[R[32]]]],[11,R[50],E,E,7,[[["self"]],[T]]],[11,R[49],E,E,7,[[["self"]],[R[51]]]],[11,R[47],E,E,7,[[["self"]],[T]]],[11,R[48],E,E,7,[[["self"]],[R[32]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[["self"]],[U]]],[11,R[44],E,E,8,[[["self"]],[T]]],[11,R[45],E,E,8,N],[11,R[46],E,E,8,[[[U]],[R[32]]]],[11,R[50],E,E,8,[[["self"]],[T]]],[11,R[49],E,E,8,[[["self"]],[R[51]]]],[11,R[47],E,E,8,[[["self"]],[T]]],[11,R[48],E,E,8,[[["self"]],[R[32]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[["self"]],[U]]],[11,R[44],E,E,9,[[["self"]],[T]]],[11,R[45],E,E,9,N],[11,R[46],E,E,9,[[[U]],[R[32]]]],[11,R[50],E,E,9,[[["self"]],[T]]],[11,R[49],E,E,9,[[["self"]],[R[51]]]],[11,R[47],E,E,9,[[["self"]],[T]]],[11,R[48],E,E,9,[[["self"]],[R[32]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[["self"]],[U]]],[11,R[44],E,E,10,[[["self"]],[T]]],[11,R[45],E,E,10,N],[11,R[46],E,E,10,[[[U]],[R[32]]]],[11,R[50],E,E,10,[[["self"]],[T]]],[11,R[49],E,E,10,[[["self"]],[R[51]]]],[11,R[47],E,E,10,[[["self"]],[T]]],[11,R[48],E,E,10,[[["self"]],[R[32]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[["self"]],[U]]],[11,R[44],E,E,11,[[["self"]],[T]]],[11,R[45],E,E,11,N],[11,R[46],E,E,11,[[[U]],[R[32]]]],[11,R[50],E,E,11,[[["self"]],[T]]],[11,R[49],E,E,11,[[["self"]],[R[51]]]],[11,R[47],E,E,11,[[["self"]],[T]]],[11,R[48],E,E,11,[[["self"]],[R[32]]]],[11,"from",R[52],E,16,[[[T]],[T]]],[11,"into",E,E,16,[[["self"]],[U]]],[11,R[46],E,E,16,[[[U]],[R[32]]]],[11,R[50],E,E,16,[[["self"]],[T]]],[11,R[49],E,E,16,[[["self"]],[R[51]]]],[11,R[47],E,E,16,[[["self"]],[T]]],[11,R[48],E,E,16,[[["self"]],[R[32]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[["self"]],[U]]],[11,R[46],E,E,17,[[[U]],[R[32]]]],[11,R[50],E,E,17,[[["self"]],[T]]],[11,R[49],E,E,17,[[["self"]],[R[51]]]],[11,R[47],E,E,17,[[["self"]],[T]]],[11,R[48],E,E,17,[[["self"]],[R[32]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[["self"]],[U]]],[11,R[46],E,E,18,[[[U]],[R[32]]]],[11,R[50],E,E,18,[[["self"]],[T]]],[11,R[49],E,E,18,[[["self"]],[R[51]]]],[11,R[47],E,E,18,[[["self"]],[T]]],[11,R[48],E,E,18,[[["self"]],[R[32]]]],[11,"from",E,E,59,[[[T]],[T]]],[11,"into",E,E,59,[[["self"]],[U]]],[11,R[44],E,E,59,[[["self"]],[T]]],[11,R[45],E,E,59,N],[11,R[46],E,E,59,[[[U]],[R[32]]]],[11,R[50],E,E,59,[[["self"]],[T]]],[11,R[49],E,E,59,[[["self"]],[R[51]]]],[11,R[47],E,E,59,[[["self"]],[T]]],[11,R[48],E,E,59,[[["self"]],[R[32]]]],[11,"from",E,E,60,[[[T]],[T]]],[11,"into",E,E,60,[[["self"]],[U]]],[11,R[44],E,E,60,[[["self"]],[T]]],[11,R[45],E,E,60,N],[11,R[46],E,E,60,[[[U]],[R[32]]]],[11,R[50],E,E,60,[[["self"]],[T]]],[11,R[49],E,E,60,[[["self"]],[R[51]]]],[11,R[47],E,E,60,[[["self"]],[T]]],[11,R[48],E,E,60,[[["self"]],[R[32]]]],[11,"from",E,E,61,[[[T]],[T]]],[11,"into",E,E,61,[[["self"]],[U]]],[11,R[44],E,E,61,[[["self"]],[T]]],[11,R[45],E,E,61,N],[11,R[46],E,E,61,[[[U]],[R[32]]]],[11,R[50],E,E,61,[[["self"]],[T]]],[11,R[49],E,E,61,[[["self"]],[R[51]]]],[11,R[47],E,E,61,[[["self"]],[T]]],[11,R[48],E,E,61,[[["self"]],[R[32]]]],[11,"to_string",R[53],E,19,[[["self"]],["string"]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[["self"]],[U]]],[11,R[46],E,E,19,[[[U]],[R[32]]]],[11,R[50],E,E,19,[[["self"]],[T]]],[11,R[49],E,E,19,[[["self"]],[R[51]]]],[11,R[47],E,E,19,[[["self"]],[T]]],[11,R[48],E,E,19,[[["self"]],[R[32]]]],[11,"as_fail",E,E,19,[[["self"]],["fail"]]],[11,"from",R[54],E,22,[[[T]],[T]]],[11,"into",E,E,22,[[["self"]],[U]]],[11,R[46],E,E,22,[[[U]],[R[32]]]],[11,R[50],E,E,22,[[["self"]],[T]]],[11,R[49],E,E,22,[[["self"]],[R[51]]]],[11,R[47],E,E,22,[[["self"]],[T]]],[11,R[48],E,E,22,[[["self"]],[R[32]]]],[11,"from",E,E,62,[[[T]],[T]]],[11,"into",E,E,62,[[["self"]],[U]]],[11,R[44],E,E,62,[[["self"]],[T]]],[11,R[45],E,E,62,N],[11,R[46],E,E,62,[[[U]],[R[32]]]],[11,R[50],E,E,62,[[["self"]],[T]]],[11,R[49],E,E,62,[[["self"]],[R[51]]]],[11,R[47],E,E,62,[[["self"]],[T]]],[11,R[48],E,E,62,[[["self"]],[R[32]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,"into",E,E,23,[[["self"]],[U]]],[11,R[46],E,E,23,[[[U]],[R[32]]]],[11,R[50],E,E,23,[[["self"]],[T]]],[11,R[49],E,E,23,[[["self"]],[R[51]]]],[11,R[47],E,E,23,[[["self"]],[T]]],[11,R[48],E,E,23,[[["self"]],[R[32]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,"into",E,E,24,[[["self"]],[U]]],[11,R[46],E,E,24,[[[U]],[R[32]]]],[11,R[50],E,E,24,[[["self"]],[T]]],[11,R[49],E,E,24,[[["self"]],[R[51]]]],[11,R[47],E,E,24,[[["self"]],[T]]],[11,R[48],E,E,24,[[["self"]],[R[32]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[["self"]],[U]]],[11,R[44],E,E,25,[[["self"]],[T]]],[11,R[45],E,E,25,N],[11,R[46],E,E,25,[[[U]],[R[32]]]],[11,R[50],E,E,25,[[["self"]],[T]]],[11,R[49],E,E,25,[[["self"]],[R[51]]]],[11,R[47],E,E,25,[[["self"]],[T]]],[11,R[48],E,E,25,[[["self"]],[R[32]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,"into",E,E,26,[[["self"]],[U]]],[11,R[46],E,E,26,[[[U]],[R[32]]]],[11,R[50],E,E,26,[[["self"]],[T]]],[11,R[49],E,E,26,[[["self"]],[R[51]]]],[11,R[47],E,E,26,[[["self"]],[T]]],[11,R[48],E,E,26,[[["self"]],[R[32]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,"into",E,E,27,[[["self"]],[U]]],[11,R[44],E,E,27,[[["self"]],[T]]],[11,R[45],E,E,27,N],[11,R[46],E,E,27,[[[U]],[R[32]]]],[11,R[50],E,E,27,[[["self"]],[T]]],[11,R[49],E,E,27,[[["self"]],[R[51]]]],[11,R[47],E,E,27,[[["self"]],[T]]],[11,R[48],E,E,27,[[["self"]],[R[32]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,"into",E,E,28,[[["self"]],[U]]],[11,R[46],E,E,28,[[[U]],[R[32]]]],[11,R[50],E,E,28,[[["self"]],[T]]],[11,R[49],E,E,28,[[["self"]],[R[51]]]],[11,R[47],E,E,28,[[["self"]],[T]]],[11,R[48],E,E,28,[[["self"]],[R[32]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,"into",E,E,29,[[["self"]],[U]]],[11,R[44],E,E,29,[[["self"]],[T]]],[11,R[45],E,E,29,N],[11,R[46],E,E,29,[[[U]],[R[32]]]],[11,R[50],E,E,29,[[["self"]],[T]]],[11,R[49],E,E,29,[[["self"]],[R[51]]]],[11,R[47],E,E,29,[[["self"]],[T]]],[11,R[48],E,E,29,[[["self"]],[R[32]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[["self"]],[U]]],[11,R[44],E,E,20,[[["self"]],[T]]],[11,R[45],E,E,20,N],[11,R[46],E,E,20,[[[U]],[R[32]]]],[11,R[50],E,E,20,[[["self"]],[T]]],[11,R[49],E,E,20,[[["self"]],[R[51]]]],[11,R[47],E,E,20,[[["self"]],[T]]],[11,R[48],E,E,20,[[["self"]],[R[32]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[["self"]],[U]]],[11,R[44],E,E,21,[[["self"]],[T]]],[11,R[45],E,E,21,N],[11,R[46],E,E,21,[[[U]],[R[32]]]],[11,R[50],E,E,21,[[["self"]],[T]]],[11,R[49],E,E,21,[[["self"]],[R[51]]]],[11,R[47],E,E,21,[[["self"]],[T]]],[11,R[48],E,E,21,[[["self"]],[R[32]]]],[11,R[58],R[55],R[56],32,[[["self"],["mat"]],["mat"]]],[11,R[59],E,R[57],32,[[["self"],["mat"],["mat"]],["f64"]]],[11,"from",E,E,32,[[[T]],[T]]],[11,"into",E,E,32,[[["self"]],[U]]],[11,R[46],E,E,32,[[[U]],[R[32]]]],[11,R[50],E,E,32,[[["self"]],[T]]],[11,R[49],E,E,32,[[["self"]],[R[51]]]],[11,R[47],E,E,32,[[["self"]],[T]]],[11,R[48],E,E,32,[[["self"]],[R[32]]]],[11,R[58],E,R[56],33,[[["self"],["mat"]],["mat"]]],[11,R[59],E,R[57],33,[[["self"],["mat"],["mat"]],["f64"]]],[11,"from",E,E,33,[[[T]],[T]]],[11,"into",E,E,33,[[["self"]],[U]]],[11,R[46],E,E,33,[[[U]],[R[32]]]],[11,R[50],E,E,33,[[["self"]],[T]]],[11,R[49],E,E,33,[[["self"]],[R[51]]]],[11,R[47],E,E,33,[[["self"]],[T]]],[11,R[48],E,E,33,[[["self"]],[R[32]]]],[11,R[58],E,R[56],34,[[["self"],["mat"]],["mat"]]],[11,R[59],E,R[57],34,[[["self"],["mat"],["mat"]],["f64"]]],[11,"from",E,E,34,[[[T]],[T]]],[11,"into",E,E,34,[[["self"]],[U]]],[11,R[46],E,E,34,[[[U]],[R[32]]]],[11,R[50],E,E,34,[[["self"]],[T]]],[11,R[49],E,E,34,[[["self"]],[R[51]]]],[11,R[47],E,E,34,[[["self"]],[T]]],[11,R[48],E,E,34,[[["self"]],[R[32]]]],[11,R[58],E,R[56],35,[[["self"],["mat"]],["mat"]]],[11,R[59],E,R[57],35,[[["self"],["mat"],["mat"]],["f64"]]],[11,"from",E,E,35,[[[T]],[T]]],[11,"into",E,E,35,[[["self"]],[U]]],[11,R[46],E,E,35,[[[U]],[R[32]]]],[11,R[50],E,E,35,[[["self"]],[T]]],[11,R[49],E,E,35,[[["self"]],[R[51]]]],[11,R[47],E,E,35,[[["self"]],[T]]],[11,R[48],E,E,35,[[["self"]],[R[32]]]],[11,R[58],E,R[56],36,[[["self"],["mat"]],["mat"]]],[11,R[59],E,R[57],36,[[["self"],["mat"],["mat"]],["f64"]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[["self"]],[U]]],[11,R[46],E,E,36,[[[U]],[R[32]]]],[11,R[50],E,E,36,[[["self"]],[T]]],[11,R[49],E,E,36,[[["self"]],[R[51]]]],[11,R[47],E,E,36,[[["self"]],[T]]],[11,R[48],E,E,36,[[["self"]],[R[32]]]],[11,R[58],E,R[56],37,[[["self"],["mat"]],["mat"]]],[11,R[59],E,R[57],37,[[["self"],["mat"],["mat"]],["f64"]]],[11,"from",E,E,37,[[[T]],[T]]],[11,"into",E,E,37,[[["self"]],[U]]],[11,R[46],E,E,37,[[[U]],[R[32]]]],[11,R[50],E,E,37,[[["self"]],[T]]],[11,R[49],E,E,37,[[["self"]],[R[51]]]],[11,R[47],E,E,37,[[["self"]],[T]]],[11,R[48],E,E,37,[[["self"]],[R[32]]]],[11,"from",R[60],E,38,[[[T]],[T]]],[11,"into",E,E,38,[[["self"]],[U]]],[11,R[44],E,E,38,[[["self"]],[T]]],[11,R[45],E,E,38,N],[11,R[46],E,E,38,[[[U]],[R[32]]]],[11,R[50],E,E,38,[[["self"]],[T]]],[11,R[49],E,E,38,[[["self"]],[R[51]]]],[11,R[47],E,E,38,[[["self"]],[T]]],[11,R[48],E,E,38,[[["self"]],[R[32]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,"into",E,E,39,[[["self"]],[U]]],[11,R[44],E,E,39,[[["self"]],[T]]],[11,R[45],E,E,39,N],[11,R[46],E,E,39,[[[U]],[R[32]]]],[11,R[50],E,E,39,[[["self"]],[T]]],[11,R[49],E,E,39,[[["self"]],[R[51]]]],[11,R[47],E,E,39,[[["self"]],[T]]],[11,R[48],E,E,39,[[["self"]],[R[32]]]],[11,"from",R[61],E,41,[[[T]],[T]]],[11,"into",E,E,41,[[["self"]],[U]]],[11,R[44],E,E,41,[[["self"]],[T]]],[11,R[45],E,E,41,N],[11,R[46],E,E,41,[[[U]],[R[32]]]],[11,R[50],E,E,41,[[["self"]],[T]]],[11,R[49],E,E,41,[[["self"]],[R[51]]]],[11,R[47],E,E,41,[[["self"]],[T]]],[11,R[48],E,E,41,[[["self"]],[R[32]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,"into",E,E,42,[[["self"]],[U]]],[11,R[44],E,E,42,[[["self"]],[T]]],[11,R[45],E,E,42,N],[11,R[46],E,E,42,[[[U]],[R[32]]]],[11,R[50],E,E,42,[[["self"]],[T]]],[11,R[49],E,E,42,[[["self"]],[R[51]]]],[11,R[47],E,E,42,[[["self"]],[T]]],[11,R[48],E,E,42,[[["self"]],[R[32]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,"into",E,E,43,[[["self"]],[U]]],[11,R[44],E,E,43,[[["self"]],[T]]],[11,R[45],E,E,43,N],[11,R[46],E,E,43,[[[U]],[R[32]]]],[11,R[50],E,E,43,[[["self"]],[T]]],[11,R[49],E,E,43,[[["self"]],[R[51]]]],[11,R[47],E,E,43,[[["self"]],[T]]],[11,R[48],E,E,43,[[["self"]],[R[32]]]],[11,"from",R[62],E,44,[[[T]],[T]]],[11,"into",E,E,44,[[["self"]],[U]]],[11,R[44],E,E,44,[[["self"]],[T]]],[11,R[45],E,E,44,N],[11,R[46],E,E,44,[[[U]],[R[32]]]],[11,R[50],E,E,44,[[["self"]],[T]]],[11,R[49],E,E,44,[[["self"]],[R[51]]]],[11,R[47],E,E,44,[[["self"]],[T]]],[11,R[48],E,E,44,[[["self"]],[R[32]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,"into",E,E,45,[[["self"]],[U]]],[11,R[44],E,E,45,[[["self"]],[T]]],[11,R[45],E,E,45,N],[11,R[46],E,E,45,[[[U]],[R[32]]]],[11,R[50],E,E,45,[[["self"]],[T]]],[11,R[49],E,E,45,[[["self"]],[R[51]]]],[11,R[47],E,E,45,[[["self"]],[T]]],[11,R[48],E,E,45,[[["self"]],[R[32]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,"into",E,E,46,[[["self"]],[U]]],[11,R[44],E,E,46,[[["self"]],[T]]],[11,R[45],E,E,46,N],[11,R[46],E,E,46,[[[U]],[R[32]]]],[11,R[50],E,E,46,[[["self"]],[T]]],[11,R[49],E,E,46,[[["self"]],[R[51]]]],[11,R[47],E,E,46,[[["self"]],[T]]],[11,R[48],E,E,46,[[["self"]],[R[32]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,"into",E,E,47,[[["self"]],[U]]],[11,R[44],E,E,47,[[["self"]],[T]]],[11,R[45],E,E,47,N],[11,R[46],E,E,47,[[[U]],[R[32]]]],[11,R[50],E,E,47,[[["self"]],[T]]],[11,R[49],E,E,47,[[["self"]],[R[51]]]],[11,R[47],E,E,47,[[["self"]],[T]]],[11,R[48],E,E,47,[[["self"]],[R[32]]]],[11,"from",R[63],E,48,[[[T]],[T]]],[11,"into",E,E,48,[[["self"]],[U]]],[11,R[44],E,E,48,[[["self"]],[T]]],[11,R[45],E,E,48,N],[11,R[46],E,E,48,[[[U]],[R[32]]]],[11,R[50],E,E,48,[[["self"]],[T]]],[11,R[49],E,E,48,[[["self"]],[R[51]]]],[11,R[47],E,E,48,[[["self"]],[T]]],[11,R[48],E,E,48,[[["self"]],[R[32]]]],[11,"from",E,E,63,[[[T]],[T]]],[11,"into",E,E,63,[[["self"]],[U]]],[11,R[44],E,E,63,[[["self"]],[T]]],[11,R[45],E,E,63,N],[11,R[46],E,E,63,[[[U]],[R[32]]]],[11,R[50],E,E,63,[[["self"]],[T]]],[11,R[49],E,E,63,[[["self"]],[R[51]]]],[11,R[47],E,E,63,[[["self"]],[T]]],[11,R[48],E,E,63,[[["self"]],[R[32]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,"into",E,E,49,[[["self"]],[U]]],[11,R[44],E,E,49,[[["self"]],[T]]],[11,R[45],E,E,49,N],[11,R[46],E,E,49,[[[U]],[R[32]]]],[11,R[50],E,E,49,[[["self"]],[T]]],[11,R[49],E,E,49,[[["self"]],[R[51]]]],[11,R[47],E,E,49,[[["self"]],[T]]],[11,R[48],E,E,49,[[["self"]],[R[32]]]],[11,"from",R[64],E,53,[[[T]],[T]]],[11,"into",E,E,53,[[["self"]],[U]]],[11,R[46],E,E,53,[[[U]],[R[32]]]],[11,R[50],E,E,53,[[["self"]],[T]]],[11,R[49],E,E,53,[[["self"]],[R[51]]]],[11,R[47],E,E,53,[[["self"]],[T]]],[11,R[48],E,E,53,[[["self"]],[R[32]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,"into",E,E,54,[[["self"]],[U]]],[11,R[46],E,E,54,[[[U]],[R[32]]]],[11,R[50],E,E,54,[[["self"]],[T]]],[11,R[49],E,E,54,[[["self"]],[R[51]]]],[11,R[47],E,E,54,[[["self"]],[T]]],[11,R[48],E,E,54,[[["self"]],[R[32]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,"into",E,E,50,[[["self"]],[U]]],[11,R[44],E,E,50,[[["self"]],[T]]],[11,R[45],E,E,50,N],[11,R[46],E,E,50,[[[U]],[R[32]]]],[11,R[50],E,E,50,[[["self"]],[T]]],[11,R[49],E,E,50,[[["self"]],[R[51]]]],[11,R[47],E,E,50,[[["self"]],[T]]],[11,R[48],E,E,50,[[["self"]],[R[32]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,"into",E,E,51,[[["self"]],[U]]],[11,R[46],E,E,51,[[[U]],[R[32]]]],[11,R[50],E,E,51,[[["self"]],[T]]],[11,R[49],E,E,51,[[["self"]],[R[51]]]],[11,R[47],E,E,51,[[["self"]],[T]]],[11,R[48],E,E,51,[[["self"]],[R[32]]]],[11,"from",E,E,64,[[[T]],[T]]],[11,"into",E,E,64,[[["self"]],[U]]],[11,R[44],E,E,64,[[["self"]],[T]]],[11,R[45],E,E,64,N],[11,R[46],E,E,64,[[[U]],[R[32]]]],[11,R[50],E,E,64,[[["self"]],[T]]],[11,R[49],E,E,64,[[["self"]],[R[51]]]],[11,R[47],E,E,64,[[["self"]],[T]]],[11,R[48],E,E,64,[[["self"]],[R[32]]]],[11,"from",R[65],E,57,[[[T]],[T]]],[11,"into",E,E,57,[[["self"]],[U]]],[11,R[46],E,E,57,[[[U]],[R[32]]]],[11,R[50],E,E,57,[[["self"]],[T]]],[11,R[49],E,E,57,[[["self"]],[R[51]]]],[11,R[47],E,E,57,[[["self"]],[T]]],[11,R[48],E,E,57,[[["self"]],[R[32]]]],[11,"from",E,E,58,[[[T]],[T]]],[11,"into",E,E,58,[[["self"]],[U]]],[11,R[46],E,E,58,[[[U]],[R[32]]]],[11,R[50],E,E,58,[[["self"]],[T]]],[11,R[49],E,E,58,[[["self"]],[R[51]]]],[11,R[47],E,E,58,[[["self"]],[T]]],[11,R[48],E,E,58,[[["self"]],[R[32]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,"into",E,E,55,[[["self"]],[U]]],[11,R[44],E,E,55,[[["self"]],[T]]],[11,R[45],E,E,55,N],[11,R[46],E,E,55,[[[U]],[R[32]]]],[11,R[50],E,E,55,[[["self"]],[T]]],[11,R[49],E,E,55,[[["self"]],[R[51]]]],[11,R[47],E,E,55,[[["self"]],[T]]],[11,R[48],E,E,55,[[["self"]],[R[32]]]],[11,"from",E,E,56,[[[T]],[T]]],[11,"into",E,E,56,[[["self"]],[U]]],[11,R[44],E,E,56,[[["self"]],[T]]],[11,R[45],E,E,56,N],[11,R[46],E,E,56,[[[U]],[R[32]]]],[11,R[50],E,E,56,[[["self"]],[T]]],[11,R[49],E,E,56,[[["self"]],[R[51]]]],[11,R[47],E,E,56,[[["self"]],[T]]],[11,R[48],E,E,56,[[["self"]],[R[32]]]],[11,R[66],R[54],E,26,N],[11,R[66],E,E,28,N],[11,"show",R[63],E,48,[[["self"],["str"],["c_int"]],[R[32],["error"]]]],[11,R[67],R[52],E,17,[[["self"],["mat"]],["vec"]]],[11,R[67],E,E,18,[[["self"],["mat"]],["vec"]]],[11,R[67],R[64],E,53,[[["self"],["mat"]],["vec"]]],[11,R[67],E,E,51,[[["self"],["mat"]],["vec"]]],[11,"eq",R[43],E,5,[[["self"],["rect"]],["bool"]]],[11,"ne",E,E,5,[[["self"],["rect"]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[79]]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[68]]],["bool"]]],[11,"eq",E,E,9,[[["self"],["cvtype"]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[69]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[70]]],["bool"]]],[11,"eq",R[60],E,38,[[["self"],[R[71]]],["bool"]]],[11,"eq",E,E,39,[[["self"],[R[85]]],["bool"]]],[11,"eq",R[61],E,41,[[["self"],[R[86]]],["bool"]]],[11,"eq",E,E,42,[[["self"],[R[87]]],["bool"]]],[11,"eq",E,E,43,[[["self"],[R[88]]],["bool"]]],[11,"eq",R[62],E,44,[[["self"],[R[89]]],["bool"]]],[11,"eq",E,E,45,[[["self"],[R[90]]],["bool"]]],[11,"eq",E,E,46,[[["self"],[R[91]]],["bool"]]],[11,"eq",E,E,47,[[["self"],[R[92]]],["bool"]]],[11,"eq",R[65],E,55,[[["self"],[R[72]]],["bool"]]],[11,"eq",E,E,56,[[["self"],[R[42]]],["bool"]]],[11,R[73],R[43],E,0,[[],[R[77]]]],[11,R[73],E,E,13,[[],[R[78]]]],[11,R[73],E,E,1,[[],[R[97]]]],[11,R[73],E,E,2,[[],["point2f"]]],[11,R[73],E,E,3,[[],[R[13]]]],[11,R[73],E,E,4,[[],["size2f"]]],[11,R[73],E,E,5,[[],["rect"]]],[11,R[73],E,E,6,[[],["rect2f"]]],[11,R[73],E,E,14,[[],[R[74]]]],[11,R[73],R[52],E,17,[[],["gpuhog"]]],[11,R[73],R[54],E,62,[[],["dmatch"]]],[11,R[73],E,E,25,[[],[R[82]]]],[11,R[73],E,E,27,[[],[R[83]]]],[11,R[73],E,E,29,[[],[R[84]]]],[11,R[73],R[64],E,50,[[],[R[36]]]],[11,R[73],E,E,51,[[],[R[75]]]],[11,R[73],R[65],E,58,[[],[R[76]]]],[11,"clone",R[43],E,0,[[["self"]],[R[77]]]],[11,"clone",E,E,13,[[["self"]],[R[78]]]],[11,"clone",E,E,1,[[["self"]],[R[97]]]],[11,"clone",E,E,2,[[["self"]],["point2f"]]],[11,"clone",E,E,3,[[["self"]],[R[13]]]],[11,"clone",E,E,4,[[["self"]],["size2f"]]],[11,"clone",E,E,5,[[["self"]],["rect"]]],[11,"clone",E,E,6,[[["self"]],["rect2f"]]],[11,"clone",E,E,7,[[["self"]],[R[79]]]],[11,"clone",E,E,8,[[["self"]],[R[68]]]],[11,"clone",E,E,9,[[["self"]],["cvtype"]]],[11,"clone",E,E,14,[[["self"]],[R[74]]]],[11,"clone",E,E,10,[[["self"]],[R[69]]]],[11,"clone",E,E,11,[[["self"]],[R[70]]]],[11,"clone",R[52],E,59,[[["self"]],["cgpumat"]]],[11,"clone",E,E,60,[[["self"]],["cgpuhog"]]],[11,"clone",E,E,61,[[["self"]],["cgpucascade"]]],[11,"clone",R[54],E,20,[[["self"]],[R[80]]]],[11,"clone",E,E,62,[[["self"]],["dmatch"]]],[11,"clone",E,E,21,[[["self"]],[R[81]]]],[11,"clone",E,E,25,[[["self"]],[R[82]]]],[11,"clone",E,E,27,[[["self"]],[R[83]]]],[11,"clone",E,E,29,[[["self"]],[R[84]]]],[11,"clone",R[60],E,38,[[["self"]],[R[71]]]],[11,"clone",E,E,39,[[["self"]],[R[85]]]],[11,"clone",R[61],E,41,[[["self"]],[R[86]]]],[11,"clone",E,E,42,[[["self"]],[R[87]]]],[11,"clone",E,E,43,[[["self"]],[R[88]]]],[11,"clone",R[62],E,44,[[["self"]],[R[89]]]],[11,"clone",E,E,45,[[["self"]],[R[90]]]],[11,"clone",E,E,46,[[["self"]],[R[91]]]],[11,"clone",E,E,47,[[["self"]],[R[92]]]],[11,"clone",R[63],E,63,[[["self"]],["cmat"]]],[11,"clone",E,E,49,[[["self"]],[R[93]]]],[11,"clone",E,E,48,[[["self"]],["self"]]],[11,"clone",R[64],E,64,[[["self"]],["csvmdetector"]]],[11,"clone",E,E,50,[[["self"]],[R[36]]]],[11,"clone",R[65],E,55,[[["self"]],[R[72]]]],[11,"clone",E,E,56,[[["self"]],[R[42]]]],[11,"from",R[63],E,48,[[["gpumat"]],["mat"]]],[11,"from",R[52],E,16,[[["mat"]],["gpumat"]]],[11,"drop",R[43],E,15,[[["self"]]]],[11,"drop",R[52],E,16,[[["self"]]]],[11,"drop",E,E,17,[[["self"]]]],[11,"drop",E,E,18,[[["self"]]]],[11,"drop",R[54],E,22,[[["self"]]]],[11,"drop",E,E,23,[[["self"]]]],[11,"drop",E,E,24,[[["self"]]]],[11,"drop",E,E,26,[[["self"]]]],[11,"drop",E,E,28,[[["self"]]]],[11,"drop",R[55],E,32,[[["self"]]]],[11,"drop",E,E,33,[[["self"]]]],[11,"drop",E,E,34,[[["self"]]]],[11,"drop",E,E,35,[[["self"]]]],[11,"drop",E,E,36,[[["self"]]]],[11,"drop",E,E,37,[[["self"]]]],[11,"drop",R[63],E,48,[[["self"]]]],[11,"drop",R[64],E,53,[[["self"]]]],[11,"drop",E,E,54,[[["self"]]]],[11,"drop",E,E,51,[[["self"]]]],[11,"drop",R[65],E,57,[[["self"]]]],[11,"drop",E,E,58,[[["self"]]]],[11,"into",R[54],E,25,[[["self"]],["mser"]]],[11,"into",E,E,27,[[["self"]],["sift"]]],[11,"into",E,E,29,[[["self"]],["surf"]]],[11,"into",R[63],E,48,[[["self"]],["cmat"]]],[11,"fmt",R[53],E,19,[[["self"],[R[94]]],[R[32]]]],[11,"hash",R[43],E,7,N],[11,"hash",E,E,8,N],[11,"hash",E,E,9,N],[11,"hash",E,E,10,N],[11,"hash",E,E,11,N],[11,"hash",R[60],E,38,N],[11,"hash",E,E,39,N],[11,"hash",R[61],E,41,N],[11,"hash",E,E,42,N],[11,"hash",E,E,43,N],[11,"hash",R[62],E,44,N],[11,"hash",E,E,45,N],[11,"hash",E,E,46,N],[11,"hash",E,E,47,N],[11,"hash",R[65],E,55,N],[11,"hash",E,E,56,N],[11,"not",R[63],E,48,N],[11,"bitand",E,E,48,N],[11,"bitor",E,E,48,N],[11,"bitxor",E,E,48,N],[11,"fmt",R[43],E,0,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,13,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,1,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,2,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,3,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,4,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,5,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,6,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,7,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,8,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,9,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,14,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,10,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,11,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,15,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[52],E,59,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,16,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,60,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,17,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,61,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,18,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[53],E,19,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[54],E,22,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,20,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,62,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,21,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,23,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,24,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,25,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,26,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,27,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,28,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,29,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[55],E,32,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,33,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,34,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,35,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,36,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,37,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[60],E,38,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,39,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[61],E,41,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,42,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,43,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[62],E,44,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,45,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,46,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,47,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[63],E,63,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,48,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,49,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[64],E,53,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,64,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,54,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,50,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,51,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",R[65],E,57,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,55,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,58,[[["self"],[R[94]]],[R[32]]]],[11,"fmt",E,E,56,[[["self"],[R[94]]],[R[32]]]],[11,"name",R[53],E,19,[[["self"]],[R[95],["str"]]]],[11,"cause",E,E,19,[[["self"]],[R[95],["fail"]]]],[11,R[96],E,E,19,[[["self"]],[R[95],[R[96]]]]],[11,"image_decode",R[63],"Decodes an image from `buf` according to the specified mode.",48,N],[11,"image_encode",E,"Encodes an image; the encoding scheme depends on the…",48,[[["self"],["str"],["vec",[R[87]]]],[R[32],["vec","error"]]]],[11,R[31],E,"Creates a `Mat` from reading the image specified by the…",48,[[["p"],[R[86]]],[R[32],["mat","error"]]]],[11,"line",E,"Draws a simple line.",48,[[["self"],[R[97]],[R[97]]]]],[11,"line_custom",E,"Draws a line with custom color, thickness and linetype.",48,[[["self"],[R[97]],[R[97]],[R[78]],["c_int"],[R[79]],["c_int"]]]],[11,"rectangle",E,"Draws a simple, thick, or filled up-right rectangle.",48,[[["self"],["rect"]]]],[11,"rectangle_custom",E,"Draws a rectangle with custom color, thickness and linetype.",48,[[["self"],["rect"],[R[78]],["c_int"],[R[79]]]]],[11,"rectangle2f",E,"Draw a simple, thick, or filled up-right rectangle.",48,[[["self"],["rect2f"]]]],[11,"ellipse",E,"Draws a simple, thick ellipse",48,[[["self"],[R[97]],[R[13]],["f64"],["f64"],["f64"]]]],[11,"ellipse_custom",E,"Draws a custom ellipse",48,[[["self"],[R[97]],[R[13]],["f64"],["f64"],["f64"],[R[78]],["c_int"],[R[79]],["c_int"]]]],[11,"cvt_color",E,"Convert an image from one color space to another.",48,[[["self"],[R[91]]],["mat"]]],[11,"pyr_down",E,"Blurs an image and downsamples it. This function performs…",48,[[["self"]],["mat"]]],[11,"threshold",E,"Threshold",48,[[["self"],["f64"],["f64"],[R[90]]],["mat"]]],[11,"erode",E,"Erode",48,[[["self"],["mat"],[R[97]],["i32"],[R[93]],[R[78]]],["mat"]]],[11,"dilate",E,"Dilate",48,[[["self"],["mat"],[R[97]],["i32"],[R[93]],[R[78]]],["mat"]]],[11,"gaussian_blur",E,"Gaussian Blur",48,[[["self"],[R[13]],["f64"],["f64"],[R[93]]],["mat"]]],[11,"resize_to",E,R[98],48,[[["self"],[R[13]],[R[92]]],["mat"]]],[11,"resize_by",E,R[98],48,[[["self"],["f64"],["f64"],[R[92]]],["mat"]]],[11,"calc_hist",E,"Calculate a histogram of an image.",48,[[["self"],[T],["mat"],[U],["m"]],["mat"]]],[11,"calc_back_project",E,"Calculate the back projection of a histogram. The function…",48,[[["self"],[T],["mat"],["m"]],["mat"]]],[11,"compare_hist",E,"Compares two histograms. The function compare two…",48,[[["self"],["mat"],[R[89]]],[R[32],["f64","string"]]]],[11,"sobel",E,"Calculates the first x- or y- image derivative using Sobel…",48,[[["self"],["i32"],["i32"],["i32"],["i32"],["f64"],["f64"],[R[93]]],["mat"]]],[11,"scharr",E,"Calculates the first x- or y- image derivative using…",48,[[["self"],["i32"],["i32"],["i32"],["f64"],["f64"],[R[93]]],["mat"]]],[11,"canny",E,"Performs canny edge detection",48,[[["self"],["f64"],["f64"],["i32"],["bool"]],[R[32],["mat","string"]]]]],"p":[[3,R[99]],[3,"Point2i"],[3,"Point2f"],[3,"Size2i"],[3,"Size2f"],[3,"Rect"],[3,"Rect2f"],[4,"LineType"],[4,"FlipCode"],[4,"CvType"],[4,"NormType"],[4,"TermType"],[8,R[100]],[3,"Scalar"],[3,R[101]],[3,R[102]],[3,"GpuMat"],[3,"GpuHog"],[3,R[103]],[4,"CvError"],[4,R[104]],[4,R[105]],[3,R[106]],[3,R[107]],[3,"MSER"],[3,R[108]],[3,"SIFT"],[3,R[109]],[3,"SURF"],[3,R[110]],[8,R[111]],[8,"Hash"],[3,R[112]],[3,R[113]],[3,R[114]],[3,R[115]],[3,"PHash"],[3,R[116]],[4,R[117]],[4,R[118]],[8,"Show"],[4,R[119]],[4,R[120]],[4,R[121]],[4,R[122]],[4,R[123]],[4,R[124]],[4,R[125]],[3,"Mat"],[4,R[126]],[3,R[127]],[3,R[128]],[8,R[129]],[3,R[130]],[3,R[29]],[4,"CapProp"],[4,R[131]],[3,R[132]],[3,R[133]],[4,"CGpuMat"],[4,"CGpuHog"],[4,R[134]],[3,"DMatch"],[4,"CMat"],[4,R[135]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);